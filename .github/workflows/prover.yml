name: Lean Prover CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'proofs/**'
      - 'lakefile.lean'
      - 'lean-toolchain'
      - '.github/workflows/prover.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'proofs/**'
      - 'lakefile.lean'
      - 'lean-toolchain'
      - '.github/workflows/prover.yml'
  workflow_dispatch:

jobs:
  prove:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Install elan
        run: |
          curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh -s -- -y
          echo "$HOME/.elan/bin" >> $GITHUB_PATH
          
      - name: Cache Lean toolchain
        uses: actions/cache@v4
        with:
          path: ~/.elan
          key: ${{ runner.os }}-elan-${{ hashFiles('lean-toolchain') }}
          
      - name: Cache everything Lake-related
        id: cache-lake-all
        uses: actions/cache@v4
        with:
          path: |
            .lake
            lake-manifest.json
          key: ${{ runner.os }}-lake-complete-${{ hashFiles('lean-toolchain', 'lakefile.lean') }}-v2
          restore-keys: |
            ${{ runner.os }}-lake-complete-${{ hashFiles('lean-toolchain', 'lakefile.lean') }}-
            ${{ runner.os }}-lake-complete-
            
      - name: Verify cache completeness
        id: check-cache
        run: |
          echo "üîç Checking cache completeness..."
          
          # Check if lake manifest exists
          if [ ! -f "lake-manifest.json" ]; then
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "‚ùå No lake-manifest.json found"
            exit 0
          fi
          
          # Check if .lake directory exists
          if [ ! -d ".lake" ]; then
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "‚ùå No .lake directory found"
            exit 0
          fi
          
          # Check for all expected packages and their builds
          EXPECTED_PACKAGES=(
            "mathlib"
            "aesop"
            "batteries"
            "proofwidgets"
            "Qq"
            "plausible"
            "LeanSearchClient"
            "importGraph"
            "Cli"
          )
          
          ALL_FOUND=true
          for pkg in "${EXPECTED_PACKAGES[@]}"; do
            if [ ! -d ".lake/packages/$pkg" ]; then
              echo "‚ö†Ô∏è  Missing package: $pkg"
              ALL_FOUND=false
            else
              # Check if package has build artifacts
              if [ ! -d ".lake/packages/$pkg/.lake" ] && [ ! -d ".lake/build" ]; then
                echo "‚ö†Ô∏è  Missing build artifacts for: $pkg"
                ALL_FOUND=false
              fi
            fi
          done
          
          if [ "$ALL_FOUND" = true ]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Complete cache found with all packages and builds!"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "‚ùå Cache incomplete, will rebuild"
          fi
          
      - name: Update and fetch dependencies (only if cache miss)
        if: steps.check-cache.outputs.valid != 'true'
        run: |
          echo "üì¶ Cache miss - updating dependencies..."
          lake update
          echo "üì• Downloading mathlib cache..."
          lake exe cache get!
          
      - name: Build all dependencies (only if cache miss)
        if: steps.check-cache.outputs.valid != 'true'
        run: |
          echo "üî® Building ALL dependencies (this will take a few minutes)..."
          # First, ensure all dependencies are fetched
          lake build --no-build || true
          # Then build everything to populate the cache
          lake build
          echo "‚úÖ All dependencies built and ready for caching!"
          
      - name: Quick build of project
        run: |
          echo "üöÄ Building Calibrator (should be instant with cache)..."
          lake build Calibrator
          
      - name: Display build statistics
        if: always()
        run: |
          echo "üìä Build Statistics:"
          echo "===================="
          echo "Build completed at: $(date)"
          
          if [ "${{ steps.check-cache.outputs.valid }}" == "true" ]; then
            echo "‚ú® FAST BUILD - Used complete cache!"
            echo "‚ö° Only compiled project-specific files"
          else
            echo "üêå SLOW BUILD - Had to build all dependencies"
            echo "üíæ But next build will be fast!"
          fi
          
          # Show cache size info
          if [ -d ".lake" ]; then
            echo ""
            echo "üì¶ Cache size: $(du -sh .lake | cut -f1)"
            echo "üìÅ Package count: $(ls -1 .lake/packages 2>/dev/null | wc -l)"
          fi
          
      - name: Validate build outputs
        run: |
          # Ensure our main library was built successfully
          if [ -f ".lake/build/lib/Calibrator.olean" ]; then
            echo "‚úÖ Calibrator.olean found - build successful!"
          else
            echo "‚ùå Build may have failed - Calibrator.olean not found"
            exit 1
          fi
