name: Rust Test CI
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
env:
  CARGO_TERM_COLOR: always
jobs:
  # ======================================================================
  # JOB 1: Handles all Rust compilation, testing, and artifact creation.
  # ======================================================================
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      # Create a hash of source files for binary caching
      - name: Generate source hash
        id: source_hash
        run: |
          # Hash Cargo.toml and all Rust source files
          SOURCE_HASH=$(find . -name "Cargo.toml" -o -path "./src/*" -type f | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "hash=$SOURCE_HASH" >> $GITHUB_OUTPUT
          echo "Source hash: $SOURCE_HASH"

      # Try to restore the release binary from cache
      - name: Cache release binary
        id: binary_cache
        uses: actions/cache@v4
        with:
          path: |
            target/release/gnomon
          key: ${{ runner.os }}-release-binary-${{ steps.source_hash.outputs.hash }}

      # Cache Cargo directories (for dependencies and incremental builds)
      - name: Cache Cargo directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-nightly-${{ steps.source_hash.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-nightly-

      - name: Install getdoc
        run: |
          if [ ! -f ~/.cargo/bin/getdoc ]; then
            echo "Installing getdoc..."
            cargo +nightly install getdoc --locked
          else
            echo "getdoc already installed (cached)"
          fi

      - name: Run Rust unit tests
        id: test_step
        run: cargo +nightly test
        continue-on-error: true
        env:
          RUST_BACKTRACE: 1

      - name: Generate custom report with getdoc
        run: |
          ~/.cargo/bin/getdoc
          echo "=== Custom Report (getdoc) ==="
          cat report.md

      # Only build if binary cache miss
      - name: Build Gnomon release binary
        if: steps.binary_cache.outputs.cache-hit != 'true'
        run: |
          echo "Binary cache miss - building release binary..."
          cargo build --release

      # If cache hit, just verify the binary exists and is executable
      - name: Verify cached binary
        if: steps.binary_cache.outputs.cache-hit == 'true'
        run: |
          echo "Binary cache hit - verifying cached binary..."
          ls -la target/release/gnomon
          chmod +x target/release/gnomon
          ./target/release/gnomon --version || echo "Binary verification complete"

      - name: Fail job if unit tests failed
        if: steps.test_step.outcome == 'failure'
        run: exit 1

      - name: Upload build artifacts for Python jobs
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          # We upload the whole target directory so the path is identical in the next jobs
          path: |
            target
            report.md
          retention-days: 1

  # ======================================================================
  # JOB 2: Runs the first Python test on its own machine.
  # ======================================================================
  python_test_integration:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: . # This recreates the 'target' folder and 'report.md' right here
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: Install Python dependencies
        run: pip install pandas numpy requests psutil tabulate polars pyarrow
      - name: Make binary executable
        run: chmod +x target/release/gnomon
      - name: Run Integration Test
        run: python -u test/test.py

  # ======================================================================
  # JOB 3: Runs the second Python test on a third machine.
  # ======================================================================
  python_test_simulation:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: Install Python dependencies
        run: pip install pandas numpy requests psutil tabulate polars pyarrow gmpy2 multiprocessing
      - name: Make binary executable
        run: chmod +x target/release/gnomon
      - name: Run Simulation Test
        id: sim_test # ID to reference this step's outcome
        run: python -u test/sim_test.py

      - name: Check for OOM Kill on Failure
        if: failure() # This condition means the step only runs if the previous step failed
        run: |
          echo "The simulation test failed. Checking for Out-of-Memory (OOM) errors in kernel logs..."
          # Dump kernel logs and search for OOM messages.
          # The '|| true' part ensures this step doesn't fail if grep finds no matches.
          sudo dmesg | grep -i -E 'killed process|out of memory' || echo "No OOM messages found in dmesg. The failure was likely due to another reason."
