name: Rust Test CI
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Generate cache keys
        id: cache_keys
        run: |
          SOURCE_HASH=$(find . -name "Cargo.toml" -o -name "Cargo.lock" -o -path "./src/*" -type f | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "source_hash=$SOURCE_HASH" >> $GITHUB_OUTPUT
          DEPS_HASH=$(find . -name "Cargo.toml" -o -name "Cargo.lock" | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "deps_hash=$DEPS_HASH" >> $GITHUB_OUTPUT

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ steps.cache_keys.outputs.deps_hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-nightly-${{ steps.cache_keys.outputs.source_hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-nightly-${{ steps.cache_keys.outputs.deps_hash }}
            ${{ runner.os }}-cargo-build-nightly-
      
      - name: Cache getdoc binary
        id: getdoc_cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/getdoc
          key: ${{ runner.os }}-getdoc-v1

      - name: Install getdoc
        if: steps.getdoc_cache.outputs.cache-hit != 'true'
        run: cargo +nightly install getdoc --locked

      - name: Run Rust unit tests
        id: test_step
        run: cargo +nightly test
        continue-on-error: true

      - name: Generate custom report with getdoc
        if: always()
        run: |
          ~/.cargo/bin/getdoc --features default
          cat report.md

      - name: Build Gnomon binaries (Release and Profiling)
        run: |
          cargo build --release
          cargo build --profile profiling --features no-inline-profiling
      
      - name: Fail job if unit tests failed
        if: steps.test_step.outcome == 'failure'
        run: exit 1

      - name: Upload build artifacts for all downstream jobs
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            target
            report.md
          retention-days: 1

  python_test_integration:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .
      - uses: actions/setup-python@v4
        with: { python-version: '3.13' }
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('test/test.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-integration-
      - run: pip install pandas numpy requests psutil tabulate polars pyarrow
      - run: chmod +x target/release/gnomon
      - run: python -u test/test.py

  python_test_simulation:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .
      - uses: actions/setup-python@v4
        with: { python-version: '3.13' }
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-simulation-${{ hashFiles('test/sim_test.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-simulation-
      - run: pip install pandas numpy requests psutil tabulate polars pyarrow gmpy2
      - run: chmod +x target/release/gnomon
      - id: sim_test
        run: python -u test/sim_test.py
      - if: failure()
        run: |
          echo "The simulation test failed. Checking for OOM errors in kernel logs..."
          sudo dmesg | grep -i -E 'killed process|out of memory' || echo "No OOM messages found."

  python_test_benchmark:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .
      - uses: actions/setup-python@v4
        with: { python-version: '3.13' }
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-benchmark-${{ hashFiles('test/bench.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-benchmark-
      - run: pip install pandas numpy requests psutil tabulate polars pyarrow
      - run: chmod +x target/release/gnomon
      - run: python -u test/bench.py

  performance_reports:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Make profiling binary executable
        run: chmod +x target/profiling/gnomon

      - uses: actions/setup-python@v4
        with: { python-version: '3.11' }

      - name: Install Python dependencies
        run: pip install pandas numpy requests psutil

      - name: System Diagnostics
        run: |
          echo "--- System Information ---"
          echo "Kernel: $(uname -a)"
          echo "Distribution: $(lsb_release -a)"
          echo "CPU Cores: $(nproc)"
          echo "--- Memory ---"
          free -h
          echo "------------------------"

      - name: Get Kernel Version for Cache Key
        id: kernel_version
        run: echo "version=$(uname -r)" >> $GITHUB_OUTPUT
      
      - name: Cache APT packages for perf
        id: apt_cache
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-perf-tools-cache-${{ steps.kernel_version.outputs.version }}

      - name: Install Perf Tools
        run: |
          CURRENT_KERNEL=$(uname -r)
          REQUIRED_PACKAGES="linux-tools-common linux-tools-${CURRENT_KERNEL}"
          if [ "${{ steps.apt_cache.outputs.cache-hit }}" != 'true' ]; then
            sudo apt-get update -y
          fi
          sudo apt-get install -y --no-install-recommends ${REQUIRED_PACKAGES}
          perf --version

      - name: Configure Profiler Permissions
        run: |
          sudo sh -c 'echo -1 > /proc/sys/kernel/perf_event_paranoid'
          sudo sh -c 'echo 0 > /proc/sys/kernel/kptr_restrict'
          
      - name: Run Profiling Harness
        run: python test/perf.py
          
      - name: Grant Cache Permissions
        if: always()
        run: sudo chown -R runner:runner /var/cache/apt/archives /var/lib/apt/lists
          
      - name: Upload Profiling Data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-data-${{ github.run_id }}
          path: perf.data
          if-no-files-found: ignore
