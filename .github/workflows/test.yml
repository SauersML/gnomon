name: Rust Test CI
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PYTHON_VERSION: '3.13'
jobs:
  # ======================================================================
  # JOB 1: Handles all Rust compilation, testing, and artifact creation.
  # ======================================================================
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      # Generate comprehensive hashes for better caching
      - name: Generate cache keys
        id: cache_keys
        run: |
          # Hash for source files (Rust code changes)
          SOURCE_HASH=$(find . -name "Cargo.toml" -o -name "Cargo.lock" -o -path "./src/*" -type f | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "source_hash=$SOURCE_HASH" >> $GITHUB_OUTPUT
          
          # Hash for Cargo.toml only (dependency changes)
          DEPS_HASH=$(find . -name "Cargo.toml" -o -name "Cargo.lock" | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "deps_hash=$DEPS_HASH" >> $GITHUB_OUTPUT
          
          # Date for weekly cache rotation
          echo "week=$(/bin/date -u '+%Y-%U')" >> $GITHUB_OUTPUT
          
          echo "Source hash: $SOURCE_HASH"
          echo "Deps hash: $DEPS_HASH"

      # Cache release binary
      - name: Cache release binary
        id: binary_cache
        uses: actions/cache@v4
        with:
          path: |
            target/release/gnomon
          key: ${{ runner.os }}-release-binary-${{ steps.cache_keys.outputs.source_hash }}
          restore-keys: |
            ${{ runner.os }}-release-binary-

      # Cache Cargo registry (dependencies)
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ steps.cache_keys.outputs.deps_hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Cache Cargo build artifacts
      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: |
            target
            !target/release/gnomon
          key: ${{ runner.os }}-cargo-build-nightly-${{ steps.cache_keys.outputs.source_hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-nightly-${{ steps.cache_keys.outputs.deps_hash }}
            ${{ runner.os }}-cargo-build-nightly-

      # Cache getdoc binary separately
      - name: Cache getdoc
        id: getdoc_cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/getdoc
          key: ${{ runner.os }}-getdoc-${{ steps.cache_keys.outputs.week }}

      - name: Install getdoc
        if: steps.getdoc_cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing getdoc..."
          cargo +nightly install getdoc --locked

      - name: Run Rust unit tests
        id: test_step
        run: cargo +nightly test
        continue-on-error: true

      - name: Generate custom report with getdoc
        run: |
          ~/.cargo/bin/getdoc
          echo "=== Custom Report (getdoc) ==="
          cat report.md

      # Build only if binary cache miss
      - name: Build Gnomon release binary
        if: steps.binary_cache.outputs.cache-hit != 'true'
        run: |
          echo "Binary cache miss - building release binary..."
          cargo build --release

      # Verify cached binary
      - name: Verify cached binary
        if: steps.binary_cache.outputs.cache-hit == 'true'
        run: |
          echo "Binary cache hit - verifying cached binary..."
          ls -la target/release/gnomon
          chmod +x target/release/gnomon
          ./target/release/gnomon --version || echo "Binary verification complete"

      - name: Fail job if unit tests failed
        if: steps.test_step.outcome == 'failure'
        run: exit 1

      - name: Upload build artifacts for Python jobs
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            target/release/gnomon
            report.md
          retention-days: 1
          compression-level: 9

  # ======================================================================
  # JOB 2: Runs the first Python test (integration)
  # ======================================================================
  python_test_integration:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Cache pip dependencies
      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-integration-
            ${{ runner.os }}-pip-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip wheel setuptools
          pip install pandas numpy requests psutil tabulate polars pyarrow

      - name: Make binary executable
        run: chmod +x target/release/gnomon

      - name: Run Integration Test
        run: python -u test/test.py

  # ======================================================================
  # JOB 3: Runs the simulation test
  # ======================================================================
  python_test_simulation:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Cache pip dependencies
      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-simulation-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-simulation-
            ${{ runner.os }}-pip-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip wheel setuptools
          pip install pandas numpy requests psutil tabulate polars pyarrow gmpy2

      - name: Make binary executable
        run: chmod +x target/release/gnomon

      - name: Run Simulation Test
        id: sim_test
        run: python -u test/sim_test.py

      - name: Check for OOM Kill on Failure
        if: failure()
        run: |
          echo "The simulation test failed. Checking for Out-of-Memory (OOM) errors in kernel logs..."
          sudo dmesg | grep -i -E 'killed process|out of memory' || echo "No OOM messages found in dmesg. The failure was likely due to another reason."

  # ======================================================================
  # JOB 4: Runs the benchmark test with 8 CPUs
  # ======================================================================
  python_test_benchmark:
    runs-on: ubuntu-latest-8-cores  # Request 8-core runner
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Cache pip dependencies
      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-benchmark-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-benchmark-
            ${{ runner.os }}-pip-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip wheel setuptools
          pip install pandas numpy requests psutil tabulate polars pyarrow

      - name: Make binary executable
        run: chmod +x target/release/gnomon

      - name: Show CPU info
        run: |
          echo "=== CPU Information ==="
          nproc
          lscpu | grep -E '^CPU\(s\):|^Model name:|^Thread\(s\) per core:|^Core\(s\) per socket:'

      - name: Run Benchmark Test
        run: |
          python -u test/bench.py
