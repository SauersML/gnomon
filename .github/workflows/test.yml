name: Rust Test CI
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
env:
  CARGO_TERM_COLOR: always
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
      
      # Cache the entire .cargo directory (includes bin, registry, git)
      - name: Cache Cargo home
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-home-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-home-${{ hashFiles('**/Cargo.toml') }}
            ${{ runner.os }}-cargo-home
      
      # Cache target directory with more granular keys
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src/**/*.rs') }}-${{ hashFiles('tests/**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-target-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-target-${{ hashFiles('**/Cargo.toml') }}
            ${{ runner.os }}-target
      
      # Cache Rust toolchain components
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: ${{ runner.os }}-rust-toolchain-nightly-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-rust-toolchain-nightly
      
      # Cache system dependencies that might be downloaded
      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt
      
      # Cache getdoc installation with version awareness
      - name: Cache getdoc installation
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/getdoc
          key: ${{ runner.os }}-getdoc-binary-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-getdoc-binary
      
      # Cache compiled dependencies separately from target
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            target/debug/deps
            target/debug/build
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps
      
      # Install getdoc only if not cached
      - name: Install getdoc
        run: |
          if [ ! -f ~/.cargo/bin/getdoc ]; then
            echo "Installing getdoc..."
            cargo +nightly install getdoc --locked
          else
            echo "getdoc already installed (cached)"
          fi
      
      # Cache test artifacts
      - name: Cache test artifacts
        uses: actions/cache@v4
        with:
          path: |
            target/debug/incremental
            target/.rustc_info.json
          key: ${{ runner.os }}-test-artifacts-${{ hashFiles('src/**/*.rs') }}-${{ hashFiles('tests/**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-test-artifacts
      
      - name: Test
        id: test_step
        run: cargo +nightly test
        continue-on-error: true
        env:
          RUST_BACKTRACE: 1
      
      # Cache generated reports
      - name: Cache reports
        uses: actions/cache@v4
        with:
          path: |
            report.md
            target/doc
          key: ${{ runner.os }}-reports-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-reports
      
      - name: Generate report
        run: |
          ~/.cargo/bin/getdoc
          echo "=== Test Report ==="
          cat report.md
      
      - name: Fail job if tests failed
        if: steps.test_step.outcome == 'failure'
        run: exit 1
