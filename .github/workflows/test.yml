name: Rust Test CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  # ======================================================================
  # JOB 1: Handles all Rust compilation, testing, and artifact creation.
  # ======================================================================
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache Cargo directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-nightly-${{ hashFiles('**/Cargo.lock') }}

      - name: Install getdoc
        run: |
          if [ ! -f ~/.cargo/bin/getdoc ]; then
            echo "Installing getdoc..."
            cargo +nightly install getdoc --locked
          else
            echo "getdoc already installed (cached)"
          fi
      
      - name: Run Rust unit tests
        id: test_step
        run: cargo +nightly test
        continue-on-error: true
        env:
          RUST_BACKTRACE: 1

      - name: Generate custom report with getdoc
        run: |
          ~/.cargo/bin/getdoc
          echo "=== Custom Report (getdoc) ==="
          cat report.md

      - name: Build Gnomon release binary
        run: cargo build --release

      - name: Fail job if unit tests failed
        if: steps.test_step.outcome == 'failure'
        run: exit 1

      - name: Upload build artifacts for Python jobs
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          # We upload the whole target directory so the path is identical in the next jobs
          path: |
            target
            report.md
          retention-days: 1

  # ======================================================================
  # JOB 2: Runs the first Python test on its own machine.
  # ======================================================================
  python_test_integration:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: . # This recreates the 'target' folder and 'report.md' right here

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install pandas numpy requests psutil tabulate polars

      - name: Make binary executable
        run: chmod +x target/release/gnomon

      - name: Run Integration Test
        run: python -u test/test.py

  # ======================================================================
  # JOB 3: Runs the second Python test on a third machine.
  # ======================================================================
  python_test_simulation:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install pandas numpy requests psutil tabulate polars

      - name: Make binary executable
        run: chmod +x target/release/gnomon

      - name: Run Simulation Test
        run: python -u test/sim_test.py
